(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{254:function(e,a,t){"use strict";t.r(a);var s=t(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"play-around-with-containers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#play-around-with-containers","aria-hidden":"true"}},[e._v("#")]),e._v(" Play around with Containers")]),e._v(" "),t("h2",{attrs:{id:"what-is-container"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-is-container","aria-hidden":"true"}},[e._v("#")]),e._v(" What is Container?")]),e._v(" "),t("h3",{attrs:{id:"container-introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#container-introduction","aria-hidden":"true"}},[e._v("#")]),e._v(" Container Introduction")]),e._v(" "),t("p",[e._v("A container is a set of processes just like other processes you launched from the shell, except that it's being isolated in its namespace, cgroups, and union filesystem. It has everything it needs in its isolation: code, runtime, system tools, system libraries, settings and so on. It is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.")]),e._v(" "),t("h3",{attrs:{id:"a-little-bit-background-visualization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-little-bit-background-visualization","aria-hidden":"true"}},[e._v("#")]),e._v(" A Little Bit Background, Visualization")]),e._v(" "),t("p",[e._v("Before container era, we usually use visualization technology to limit and control system resources for the applications. However, it creates too much overhead on the physical machine. And thus, container as a lightweight solution emerged.")]),e._v(" "),t("h3",{attrs:{id:"container-v-s-visualization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#container-v-s-visualization","aria-hidden":"true"}},[e._v("#")]),e._v(" Container v/s Visualization")]),e._v(" "),t("p",[e._v("Containers and virtual machines have similar resource isolation and allocation benefits, but function differently because containers virtualize the operating system instead of hardware. Containers are more portable and efficient.")]),e._v(" "),t("h2",{attrs:{id:"why-use-container"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-use-container","aria-hidden":"true"}},[e._v("#")]),e._v(" Why use Container?")]),e._v(" "),t("h3",{attrs:{id:"physical-resources-isolation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#physical-resources-isolation","aria-hidden":"true"}},[e._v("#")]),e._v(" Physical Resources Isolation")]),e._v(" "),t("p",[e._v("Container isolates physical resources such as CPU, memory, disk I/O and network from other containers.")]),e._v(" "),t("h3",{attrs:{id:"kernel-resources-isolation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kernel-resources-isolation","aria-hidden":"true"}},[e._v("#")]),e._v(" Kernel Resources Isolation")]),e._v(" "),t("p",[e._v("Container isolates OS kernel resources such process id, mount points, user and group IDs from other containers.")]),e._v(" "),t("h3",{attrs:{id:"eliminate-the-difference-between-environments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eliminate-the-difference-between-environments","aria-hidden":"true"}},[e._v("#")]),e._v(" Eliminate the Difference between Environments")]),e._v(" "),t("p",[e._v("Containers eliminates differences between development and staging environments and help reduce conflicts between teams running different software on the same infrastructure.")]),e._v(" "),t("h2",{attrs:{id:"essential-knowledge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#essential-knowledge","aria-hidden":"true"}},[e._v("#")]),e._v(" Essential Knowledge")]),e._v(" "),t("h3",{attrs:{id:"host-machine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#host-machine","aria-hidden":"true"}},[e._v("#")]),e._v(" Host Machine")]),e._v(" "),t("h3",{attrs:{id:"cgroups"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cgroups","aria-hidden":"true"}},[e._v("#")]),e._v(" CGroups")]),e._v(" "),t("p",[e._v("Cgroups is a Kernel feature that organizes processes into hierarchical groups to limit and monitor their system usage such as CPU, memory, disk, network and so on.")]),e._v(" "),t("h3",{attrs:{id:"unshare"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unshare","aria-hidden":"true"}},[e._v("#")]),e._v(" Unshare")]),e._v(" "),t("p",[e._v("Unshare is a utility running program with some namespaces unshared from a parent. We create a new PID namespace below.")]),e._v(" "),t("h3",{attrs:{id:"namespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#namespace","aria-hidden":"true"}},[e._v("#")]),e._v(" Namespace")]),e._v(" "),t("p",[e._v("Namespace enables us having the same name for some global system resources. For example, A PID namespace empowers the process inside the namespace running with 1 as PID, which at the same time, init is running with 1 as PID in the regular namespace.")]),e._v(" "),t("h3",{attrs:{id:"unionfs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unionfs","aria-hidden":"true"}},[e._v("#")]),e._v(" UnionFS")]),e._v(" "),t("p",[e._v("Union File System or UnionFS variants such as AUFS, btrfs, vfs, and devicemapper are the file system that used by most container engines. It allows files and directories of separate file systems overlaid one by one, forming a final single coherent file system.")]),e._v(" "),t("h3",{attrs:{id:"oci"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oci","aria-hidden":"true"}},[e._v("#")]),e._v(" OCI")]),e._v(" "),t("p",[e._v("The Open Container Initiative or OCI develops specifications for standards on Operating System process and application containers. It defines two specs: the Runtime Specification and the Image Specification.")]),e._v(" "),t("h3",{attrs:{id:"image"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#image","aria-hidden":"true"}},[e._v("#")]),e._v(" Image")]),e._v(" "),t("p",[e._v("The image is a binary packaged with files and organized by layers. The container is a runtime instance of the image. You can have various containers for one image. The image v/s container is pretty much like the program v/s process.")]),e._v(" "),t("h3",{attrs:{id:"volume"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume","aria-hidden":"true"}},[e._v("#")]),e._v(" Volume")]),e._v(" "),t("h2",{attrs:{id:"containerize-the-front-end-application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#containerize-the-front-end-application","aria-hidden":"true"}},[e._v("#")]),e._v(" Containerize the Front-End Application")]),e._v(" "),t("h3",{attrs:{id:"run-busybox-container"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-busybox-container","aria-hidden":"true"}},[e._v("#")]),e._v(" Run Busybox Container")]),e._v(" "),t("p",[e._v("The command "),t("code",[e._v("docker container run")]),e._v(" runs a container with a image called called "),t("code",[e._v("busybox")]),e._v(" and runs "),t("code",[e._v("top")]),e._v(" command in the container. The "),t("code",[e._v("-t")]),e._v(" flag allocates a pseudo-TTY and the "),t("code",[e._v("-i")]),e._v(" flag keeps the shell interactively. The "),t("code",[e._v("--rm")]),e._v(" flag makes sure the container will be deleted after it's disposed.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker run --rm -i -t busybox "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("top")]),e._v("\nMem: 1647528K used, 399220K free, 864K shrd, 34672K buff, 1286272K cached\nCPU:  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("% usr  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5.2")]),e._v("% sys  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("% nic "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("92.1")]),e._v("% idle  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.6")]),e._v("% io  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("% irq  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("% sirq\nLoad average: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.63")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.17")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.06")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("/459 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v("\n  PID  "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PPID")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("USER")]),e._v("     STAT   VSZ %VSZ CPU %CPU COMMAND\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" root     R     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1252")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("top")]),e._v("\n")])])]),t("h3",{attrs:{id:"inspect-container"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inspect-container","aria-hidden":"true"}},[e._v("#")]),e._v(" Inspect Container")]),e._v(" "),t("p",[e._v("List all available containers, which includes the container we just created.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nf4b12842544a        busybox             "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"top"')]),e._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" seconds ago       Up "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),e._v(" seconds                            jolly_torvalds\n")])])]),t("p",[e._v("Attach into the container with an "),t("code",[e._v("sh")]),e._v(" command.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("~ % docker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it jolly_torvalds "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v("\n/ "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n")])])]),t("p",[e._v("The "),t("code",[e._v("top")]),e._v(" command shows another process gets created.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Mem: 1650400K used, 396348K free, 872K shrd, 34948K buff, 1286788K cached\nCPU:  0.0% usr  0.1% sys  0.0% nic 99.7% idle  0.0% io  0.0% irq  0.0% sirq\nLoad average: 0.02 0.08 0.05 2/454 22\n  PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND\n   15     0 root     S     1256  0.0   0  0.0 sh\n    1     0 root     R     1252  0.0   3  0.0 top\n")])])]),t("h3",{attrs:{id:"dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile","aria-hidden":"true"}},[e._v("#")]),e._v(" Dockerfile")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FROM node:11.8.0 as build-stage\n\nWORKDIR /app\n\nCOPY package.json /app\n\nRUN npm install\n\nCOPY . /app\n\nRUN ls . && npm run build\n\nFROM nginx:1.15.8\n\nCOPY --from=build-stage /app/build /usr/share/nginx/html\n")])])]),t("h3",{attrs:{id:"build-our-first-image"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build-our-first-image","aria-hidden":"true"}},[e._v("#")]),e._v(" Build Our First Image")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker build -f src/frontend/Dockerfile -t delicioushref-frontend:latest src/frontend\n")])])]),t("h3",{attrs:{id:"run-front-end-container"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-front-end-container","aria-hidden":"true"}},[e._v("#")]),e._v(" Run Front-End Container")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker run --rm -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8000")]),e._v(":80 delicioushref-frontend:latest\n")])])]),t("h3",{attrs:{id:"clean-up"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clean-up","aria-hidden":"true"}},[e._v("#")]),e._v(" Clean Up")]),e._v(" "),t("h3",{attrs:{id:"push-image-to-registry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#push-image-to-registry","aria-hidden":"true"}},[e._v("#")]),e._v(" Push Image to Registry")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker push\n")])])]),t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[e._v("#")]),e._v(" References")])])}],!1,null,null,null);a.default=n.exports}}]);