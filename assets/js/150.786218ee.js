(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{243:function(e,t,r){"use strict";r.r(t);var s=r(0),a=Object(s.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),r("p",[e._v("ripgrep is a line-oriented search tool that recursively searches your current directory for a regex pattern while respecting your "),r("code",[e._v(".gitignore")]),e._v(" rules. It's a replacement of searching tools like "),r("a",{attrs:{href:"https://geoff.greer.fm/ag/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Silver Searcher"),r("OutboundLink")],1),e._v(", "),r("a",{attrs:{href:"https://beyondgrep.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ack"),r("OutboundLink")],1),e._v(", "),r("a",{attrs:{href:"http://linuxcommand.org/lc3_man_pages/grep1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("grep"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("p"),e._m(1),r("p"),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),r("p",[e._v("The source code of Ripgrep program reveals it runs below steps for each searching command execution:")]),e._v(" "),r("ul",[r("li",[e._v("Entry point. "),r("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/main.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/main.rs"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("Parse options and arguments. "),r("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/app.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/app.rs"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("li",[e._v("Gather files to search. "),r("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/args.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/args.rs:"),r("code",[e._v("walker_builder")]),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("li",[e._v("Apply each line of content in these files to the Regex engine. "),r("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/args.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/args.rs:"),r("code",[e._v("search_worker")]),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("li",[e._v("Print those matched lines. "),r("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/blob/master/src/args.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/args.rs:"),r("code",[e._v("printer_standard")]),r("OutboundLink")],1),e._v(".")])]),e._v(" "),r("p",[e._v("Simplified Rust code:")]),e._v(" "),e._m(18),r("p",[e._v("ripgrep simplifies the construction of arguments and parameters by the builder design pattern.")]),e._v(" "),e._m(19),e._v(" "),r("p",[e._v("There are two major grepping utility-families: grep and ack. The former is for the plain searching, and the latter does smart searching, meaning it knows what files should be filtered out. ripgrep is a hybrid solution.")]),e._v(" "),r("p",[e._v("Scanning all files in current working directory seems easy but a challenge to be fast. It involves using a set of tricks to do system call as less as possible. ripgrep uses a Rust library "),r("a",{attrs:{href:"https://docs.rs/walkdir/2.2.7/walkdir/",target:"_blank",rel:"noopener noreferrer"}},[e._v("walkdir"),r("OutboundLink")],1),e._v(" for the best performance.")]),e._v(" "),r("p",[e._v("Distributing work to a set of workers makes grepping faster, though mutex synchronization makes it slower. ripgrep avoids the mutex lock by using a lock-free solution - "),r("a",{attrs:{href:"https://github.com/kinghajj/deque",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chase-Lev work-stealing queue"),r("OutboundLink")],1),e._v(".")]),e._v(" "),e._m(20),e._v(" "),r("p",[e._v("ripgrep loads a large chunk of data from a file, instead of line by line, which reduces the I/O overhead.")]),e._v(" "),e._m(21),e._v(" "),r("blockquote",[r("p",[e._v('skim + ripgrep + bat makes for an amazing combination for fuzzy search opening files with preview. Added "skvi" for fuzzy search open vim and "rgvi" for combining ripgrep search + vim opening. Aliases are here: '),r("a",{attrs:{href:"https://t.co/2gJLJKm1OY",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://t.co/2gJLJKm1OY"),r("OutboundLink")],1),e._v(" - "),r("a",{attrs:{href:"https://twitter.com/mitsuhiko/status/1070784353360318464",target:"_blank",rel:"noopener noreferrer"}},[e._v("@mitsuhiko"),r("OutboundLink")],1)])]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep",target:"_blank",rel:"noopener noreferrer"}},[e._v("BurntSushi/ripgrep"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://blog.burntsushi.net/ripgrep/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ripgrep is faster than {grep, ag, git grep, ucg, pt, sift}"),r("OutboundLink")],1),e._v(" explains why you should use ripgrep over any other search tool?")])])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"ripgrep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ripgrep","aria-hidden":"true"}},[this._v("#")]),this._v(" ripgrep")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#basic-usage"}},[this._v("Basic Usage")])]),t("li",[t("a",{attrs:{href:"#advanced-usage"}},[this._v("Advanced Usage")])]),t("li",[t("a",{attrs:{href:"#read-the-source-code"}},[this._v("Read the source code")])]),t("li",[t("a",{attrs:{href:"#discussions"}},[this._v("Discussions")])]),t("li",[t("a",{attrs:{href:"#references"}},[this._v("References")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"basic-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage","aria-hidden":"true"}},[this._v("#")]),this._v(" Basic Usage")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Search by a literal term. Command: "),t("code",[this._v("rg <term> <file>")]),this._v(". For example, "),t("code",[this._v("rg ripgrep ./utilities/ripgrep.md")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Search by a regex expression. Command "),t("code",[this._v("rg '<regex>' <file>")]),this._v(". For example, "),t("code",[this._v("rg '\\w+grep' utilities/ripgrep.md")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Search by a regex expression with escaped characters. For example, "),t("code",[this._v("rg 'def iterate\\(.*\\):'")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Search recursively from an entire directory of files. Command "),t("code",[this._v("rg '<regex>'")]),this._v(". For example, "),t("code",[this._v("rg '\\w+grep'")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Ignore hidden files, or binary files, or symlink files, or files defined in "),t("code",[this._v(".gitignore")]),this._v(" by default, though you can turn it on by adding more "),t("code",[this._v("u")]),this._v(" options: "),t("code",[this._v("-u/-uu/-uuu/-uuuu")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Filter when term appearing in certain files. Command "),t("code",[this._v("rg <term> -g '*.<prefix>'")]),this._v(". For example, "),t("code",[this._v("rg ripgrep -g '*.md'")]),this._v(" only matches ripgrep in a markdown document.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Filter when the term is not appearing in certain files. Command "),t("code",[this._v("rg <term> -g '!*.<prefix>'")]),this._v(". For example, "),t("code",[this._v("rg ripgrep -g '!*.md'")]),this._v(" matches ripgrep in any document except markdown.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Filter by file type. Command "),t("code",[this._v("rg <term> -t<type>")]),this._v(". For example, "),t("code",[this._v("rg ripgrep -tmd")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Replace term1 to term2 in output. Command "),t("code",[this._v("rg <term1> -r/--replace <term2>")]),this._v(". For example, "),t("code",[this._v("rg ripgrep --replace rg")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Replace by regex grouping in output. Command "),t("code",[this._v("rg '<re1>' -r/--replace '<re2>'")]),this._v(". For example, "),t("code",[this._v("rg 'title: (?P<title>ripgrep)' --replace 'Title: $title'")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"advanced-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#advanced-usage","aria-hidden":"true"}},[this._v("#")]),this._v(" Advanced Usage")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("Q: How to search "),r("code",[e._v("-foo")]),e._v("?"),r("br"),e._v("\nA: You can use the -e/--regexp flag like "),r("code",[e._v("rg -e -foo")]),e._v(". Or, you can use "),r("code",[e._v("rg -- -foo")]),e._v(" as the special '--' delimiter indicates that no more flags will be provided.")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("Q: How to show N lines after or before matching lines?"),r("br"),e._v("\nA: You can use "),r("code",[e._v("-A")]),e._v(" / "),r("code",[e._v("-B")]),e._v(". For example, "),r("code",[e._v("rg term -A 1 -B 1")]),e._v(" outputs 1 line (A)fter and 1 line (B)efore the matched line.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Q: How to search in ZIP?"),t("br"),this._v("\nA: You can use "),t("code",[this._v("-z/--search-zip")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"read-the-source-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#read-the-source-code","aria-hidden":"true"}},[this._v("#")]),this._v(" Read the source code")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"language-rust extra-class"},[r("pre",{pre:!0,attrs:{class:"language-rust"}},[r("code",[e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" args "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("::")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("parse")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("mut")]),e._v(" searcher "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("search_worker")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("stdout")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" result "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("walker")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" subject "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" subject_builder"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("build_from_result")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("result"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    searcher"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("search")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("subject"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"discussions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#discussions","aria-hidden":"true"}},[this._v("#")]),this._v(" Discussions")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Searching via regex can be slow sometimes, for example, "),t("code",[this._v("'(a*)*c'")]),this._v(" takes a long time to terminate if using a backtracing engine. ripgrep uses Rust default regex engine, which uses finite automata instead of backtracking.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[this._v("#")]),this._v(" References")])}],!1,null,null,null);t.default=a.exports}}]);